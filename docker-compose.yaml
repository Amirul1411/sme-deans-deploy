networks:
  nginx_network:
    driver: bridge
  db_network:
    driver: bridge
  notification_network:
    driver: bridge
  redis_network:
    driver: bridge
  # frontend_network:
  #   driver: bridge


services:
  db:
    image: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=sme_deans_repo_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin123
    networks: 
      - db_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  redis:
    image: redis:2.8
    command: redis-server
    ports:
      - "6379:6379"
    networks: 
      - redis_network
  web:
    build:
      context: ./deans-api
    image: django_image
    entrypoint: "start_django.sh"
    env_file:
      - default.env
    environment:
      - POSTGRES_DB=sme_deans_repo_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin123
      - DATABASE_URL=postgres://postgres:admin123@db:5432/sme_deans_repo_db
    volumes:
      - ./deans-api/data:/data
      - ./deans-api/deans_api:/work/deans-api/deans_api
    depends_on:
      db:
        condition: service_healthy
    networks: 
      - db_network
      - nginx_network
      - notification_network
      - redis_network
  notification:
    build:
      context: ./deans-notification
    image: notification_image
    entrypoint: "start_server.sh"
    # command: "python -c \"while True: pass\""
    # ports:
    #   - "8000:3000"
    env_file:
      - default.env
    volumes:
      - ./deans-notification:/work
    networks:
      - notification_network
  # frontend:
  #   build:
  #     context: ./deans-frontend
  #   image: frontend_image
  #   networks:
  #     - frontend_network
  #   ports:
  #     - 3000:3000
  nginx:
    build:
      context: ./nginx
    image: nginx:1.13
    ports:
      - 8000:80
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - static_volume:/static-django
    env_file:
      - default.env
    depends_on:
      - web
      # - frontend
      # - node
    networks:
      - nginx_network
  cron:
    image: django_image
    command: bash -c "python3 /cron/cron.py"
    env_file:
      - default.env
    volumes:
      - ./cron:/cron
      - ./deans-api/deans_api:/work/deans-api/deans_api
    depends_on:
      - web
    networks:
      - notification_network
      - db_network

  db-backup:
    image: postgres:latest
    environment:
      - POSTGRES_DB=sme_deans_repo_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin123
    volumes:
      - ./scripts:/scripts
      - ./backups:/backups
      - ./scripts/backup-crontab:/etc/cron.d/backup-crontab
    entrypoint: >
      /bin/bash -c "
        echo 'Starting container setup...' &&
        apt-get update &&
        apt-get install -y cron procps &&
        mkdir -p /backups &&
        touch /backups/cron.log &&
        chmod -R 777 /backups &&
        chmod -R 755 /scripts &&
        chmod 0644 /etc/cron.d/backup-crontab &&
        chmod +x /scripts/*.sh &&
        echo 'Installing crontab...' &&
        cat /etc/cron.d/backup-crontab > /var/spool/cron/crontabs/root &&
        chmod 600 /var/spool/cron/crontabs/root &&
        echo 'Starting cron daemon...' &&
        cron -f
      "
    depends_on:
      - db
    networks:
      - db_network

volumes:
  static_volume:
  postgres_data:
  db_backup:
    driver: local




      # node:
  #   build: ./deans-frontend
  #   ports:
  #   - "3000:3000"
  #   expose:
  #     - 3000
  #   volumes:
  #    - ./deans-frontend:/work/
  #   ports:
  #     - "3000"
  #   command: bash -c "yarn install; yarn start"
  #   networks: 
  #     - nginx_network